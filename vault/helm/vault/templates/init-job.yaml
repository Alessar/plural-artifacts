---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: init-vault-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: init-vault-role
rules:
- apiGroups: [""]
  verbs: [delete, get, list, watch]
  resources: [pods]
- apiGroups: [""]
  verbs: [create]
  resources: [pods/exec]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: init-vault-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: init-vault-role
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: init-vault-sa
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-vault-cm
data:
  init-vault.sh: |
    set -euo pipefail

    wait_for_pods() {
        timeout_s=300  # 5 minutes
        echo "Waiting for Vault pods to start (timeout: $timeout_s s)"
        time_waiting_s=0
        started=no
        while [ $started == no ]; do
            set +e
            # XXX
            output=$(kubectl -n vault get pod/vault-0 -o jsonpath='{.status.phase}')
            set -e
            if [ "$output" == Running ]; then
                started=yes
            else
                echo -n "."
                sleep 20
                time_waiting_s=$[ $time_waiting_s + 20 ]
                if [ $time_waiting_s -ge $timeout_s ]; then
                    echo "ERROR: Vault pods did not start without $timeout_s seconds"
                    exit 1
                fi
            fi
        done
        echo "I can see the Vault pods have started"
    }

    wait_for_pods

    echo "Checking whether Vault is initialized or not"
    set +e
    output=$(kubectl exec -n vault -it vault-0 -c vault -- vault status)
    set -e
    initialized=$(echo "$output" | awk '{ if ($1 == "Initialized") { print $2 } }')
    if [ "$initialized" == "true" ]; then
        echo "Vault already initialized, nothing left to do"
        exit 0
    fi

    echo "Initializing Vault"
    output=$(kubectl exec -n vault -it vault-0 -c vault -- vault operator init)
    root_token=$(cat $output | grep '^Initial Root Token:' | awk '{ print $4 }')

    echo "Restarting the Vault pods"
    kubectl delete -n vault -l app.kubernetes.io/instance=vault,component=server pod
    wait_for_pods

    {{ if .Values.oidc_enabled }}
    echo "Logging in with the root token"
    kubectl exec -n vault -it vault-0 -c vault -- vault login "$root_token"

    echo "Create plural policy, entity and alias"
    kubectl exec -n vault -it vault-0 -c vault -- vault policy write plural - <<EOF
    path "*" {
      capabilities = ["list", "read", "create", "update", "patch", "delete", "sudo"]
    }
    EOF
    output=$(kubectl exec -n vault -it vault-0 -c vault -- vault write identity/entity \
        name=plural \
        policies=plural)
    entity_id=$(echo "$output" | awk '{ if ($1 == "id") { print $2 } }')
    accessor=$(kubectl exec -n vault -it vault-0 -c vault -- vault auth list | awk '{ if ($1 == "oidc/") { print $3 } }')
    kubectl exec -n vault -it vault-0 -c vault -- vault write identity/entity-alias \
        name=plural \
        mount_accessor="$accessor" \
        canonical_id="$entity_id"

    echo "Create plural role"
    TODO NEXT from here: create role

    echo "Enable and configure OIDC"
    kubectl exec -n vault -it vault-0 -c vault -- vault auth enable oidc
    kubectl exec -n vault -it vault-0 -c vault -- vault write auth/oidc/config \
        oidc_discovery_url="{{ .Values.oidc_discovery_url }}" \
        oidc_client_id="{{ .Values.oidc_client_id }}" \
        oidc_client_secret="{{ .Values.oidc_client_secret }}" \
        default_role=plural
    {{ end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-vault
spec:
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: init-vault-sa
      containers:
      - name: kubectl
        image: dkr.plural.sh/bootstrap/bitnami/kubectl:1.23.6
        command: [bash, /init-vault-cm/init-vault.sh]
        volumeMounts:
        - name: init-vault-cm
          mountPath: /init-vault-cm
          readOnly: true
      volumes:
      - name: init-vault-cm
        configMap:
          name: init-vault-cm
